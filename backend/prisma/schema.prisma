// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  fullName    String   @map("full_name") @db.VarChar(100)
  email       String   @unique @db.VarChar(100)
  password    String   @db.VarChar(255)
  phone       String?  @db.VarChar(20)
  role        Role     @default(user)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  subscriptions Subscription[]
  testimonials  Testimonial[]

  @@map("users")
}

model MealPlan {
  id          Int      @id @default(autoincrement())
  planId      String   @unique @map("plan_id") @db.VarChar(50)
  name        String   @db.VarChar(100)
  price       Decimal  @db.Decimal(10, 2)
  description String?  @db.Text
  features    Json?
  imageUrl    String?  @map("image_url") @db.VarChar(255)
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  menus         Menu[]
  subscriptions Subscription[]

  @@index([planId], map: "idx_meal_plans_plan_id")
  @@index([isActive], map: "idx_meal_plans_active")
  @@map("meal_plans")
}

model Menu {
  id               Int      @id @default(autoincrement())
  mealPlanId       Int      @map("meal_plan_id")
  name             String   @db.VarChar(150)
  description      String?  @db.Text
  ingredients      Json?
  nutritionalInfo  Json?    @map("nutritional_info")
  imageUrl         String?  @map("image_url") @db.VarChar(255)
  isAvailable      Boolean  @default(true) @map("is_available")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  mealPlan MealPlan @relation(fields: [mealPlanId], references: [id], onDelete: Cascade)

  @@index([mealPlanId], map: "idx_menus_meal_plan_id")
  @@index([isAvailable], map: "idx_menus_available")
  @@map("menus")
}

model Subscription {
  id                    Int                @id @default(autoincrement())
  userId                Int?               @map("user_id")
  planId                Int                @map("plan_id")
  selectedPlan          String             @map("selected_plan") @db.VarChar(50)
  selectedMealTypes     Json               @map("selected_meal_types")
  selectedDeliveryDays  Json               @map("selected_delivery_days")
  allergies             String?            @db.Text
  totalPrice            Decimal            @map("total_price") @db.Decimal(12, 2)
  status                SubscriptionStatus @default(pending)
  pauseStartDate        DateTime?          @map("pause_start_date") @db.Date
  pauseEndDate          DateTime?          @map("pause_end_date") @db.Date
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @updatedAt @map("updated_at")

  // Relations
  user          User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  mealPlan      MealPlan        @relation(fields: [planId], references: [id])
  testimonials  Testimonial[]
  deliveryLogs  DeliveryLog[]

  @@index([userId], map: "idx_subscriptions_user_id")
  @@index([status], map: "idx_subscriptions_status")
  @@index([createdAt], map: "idx_subscriptions_created_at")
  @@map("subscriptions")
}

model Testimonial {
  id             Int      @id @default(autoincrement())
  userId         Int      @map("user_id")
  subscriptionId Int?     @map("subscription_id")
  reviewMessage  String   @map("review_message") @db.Text
  rating         Int?
  isApproved     Boolean  @default(false) @map("is_approved")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  subscription Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, subscriptionId], map: "uk_testimonials_user_subscription")
  @@index([isApproved], map: "idx_testimonials_approved")
  @@index([rating], map: "idx_testimonials_rating")
  @@index([userId], map: "idx_testimonials_user_id")
  @@index([subscriptionId], map: "idx_testimonials_subscription_id")
  @@map("testimonials")
}

model DeliveryLog {
  id             Int            @id @default(autoincrement())
  subscriptionId Int            @map("subscription_id")
  deliveryDate   DateTime       @map("delivery_date") @db.Date
  deliveryTime   DateTime?      @map("delivery_time") @db.Time
  status         DeliveryStatus @default(scheduled)
  notes          String?        @db.Text
  createdAt      DateTime       @default(now()) @map("created_at")

  // Relations
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@index([subscriptionId], map: "idx_delivery_logs_subscription")
  @@index([deliveryDate], map: "idx_delivery_logs_date")
  @@map("delivery_logs")
}

enum Role {
  user
  admin
}

enum SubscriptionStatus {
  pending
  confirmed
  active
  paused
  cancelled
}

enum DeliveryStatus {
  scheduled
  delivered
  failed
  cancelled
} 